name: Release Automation

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: generate_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          
          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "" >> release_notes.md
            echo "First release of kubepurge - Kubernetes resource purging controller" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## Docker Images" >> release_notes.md
          echo "" >> release_notes.md
          echo "- \`ghcr.io/${{ github.repository }}:$CURRENT_TAG\`" >> release_notes.md
          echo "- \`ghcr.io/${{ github.repository }}:latest\`" >> release_notes.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '~1.22'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          BINARY_NAME="kubepurge-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          CGO_ENABLED=0 go build -a -ldflags '-w -s' -o "dist/${BINARY_NAME}" cmd/main.go
          
          # Create checksums
          cd dist
          sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/kubepurge-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          asset_name: kubepurge-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          asset_content_type: application/octet-stream

      - name: Upload Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/kubepurge-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}.sha256
          asset_name: kubepurge-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}.sha256
          asset_content_type: text/plain

  generate-manifests:
    name: Generate and Upload Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '~1.22'

      - name: Generate manifests
        run: |
          make manifests
          
          # Create a complete installation manifest
          mkdir -p dist
          
          # Combine all manifests into a single file
          echo "# kubepurge ${{ github.ref_name }} - Complete Installation Manifest" > dist/kubepurge-install.yaml
          echo "# Generated at $(date)" >> dist/kubepurge-install.yaml
          echo "" >> dist/kubepurge-install.yaml
          
          # Add CRDs
          echo "# Custom Resource Definitions" >> dist/kubepurge-install.yaml
          echo "---" >> dist/kubepurge-install.yaml
          cat config/crd/bases/*.yaml | sed 's/^//' >> dist/kubepurge-install.yaml
          echo "" >> dist/kubepurge-install.yaml
          
          # Add RBAC
          echo "# RBAC Configuration" >> dist/kubepurge-install.yaml
          echo "---" >> dist/kubepurge-install.yaml
          cat config/rbac/*.yaml | sed 's/^//' >> dist/kubepurge-install.yaml
          echo "" >> dist/kubepurge-install.yaml
          
          # Add manager deployment (update image tag)
          echo "# Manager Deployment" >> dist/kubepurge-install.yaml
          echo "---" >> dist/kubepurge-install.yaml
          sed "s|controller:latest|ghcr.io/${{ github.repository }}:${{ github.ref_name }}|g" config/manager/manager.yaml >> dist/kubepurge-install.yaml

      - name: Upload Installation Manifest
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/kubepurge-install.yaml
          asset_name: kubepurge-install.yaml
          asset_content_type: text/yaml

      - name: Upload Sample Manifests
        run: |
          tar -czf dist/kubepurge-samples.tar.gz config/samples/
        
      - name: Upload Samples Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/kubepurge-samples.tar.gz
          asset_name: kubepurge-samples.tar.gz
          asset_content_type: application/gzip